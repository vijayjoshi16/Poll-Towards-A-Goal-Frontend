[{"C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\index.js":"1","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\reportWebVitals.js":"2","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\App.js":"3","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Navbar\\Navbar.js":"4","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\HomeScreen\\HomeScreen.js":"5","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\SignIn\\SignIn.js":"6","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\SignUp\\SignUp.js":"7","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\OrganizationSignIn\\OrganizationSignIn.js":"8","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\OrganizationSignUp\\OrganizationSignUp.js":"9","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\AllOrganizationPolls\\AllOrganizationPolls.js":"10","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\PollData.js":"11","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\AllPersonalPolls\\AllPersonalPolls.js":"12","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\OrganizationProfile\\OrganizationProfile.js":"13","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\CreatePersonalPoll\\CreatePersonalPoll.js":"14","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\CreateOrganizationPoll\\CreateOrgnizationPoll.js":"15","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\OrganizationPoll\\OrganizationPoll.js":"16","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\PersonalPoll\\PersonalPoll.js":"17","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Footer\\Footer.js":"18"},{"size":500,"mtime":499162500000,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"20"},{"size":2295,"mtime":1612962685040,"results":"22","hashOfConfig":"20"},{"size":14609,"mtime":1613048404158,"results":"23","hashOfConfig":"20"},{"size":8118,"mtime":1613055130533,"results":"24","hashOfConfig":"20"},{"size":4213,"mtime":1612955838530,"results":"25","hashOfConfig":"20"},{"size":6870,"mtime":1612955701978,"results":"26","hashOfConfig":"20"},{"size":4241,"mtime":1612956825998,"results":"27","hashOfConfig":"20"},{"size":6941,"mtime":1612956543242,"results":"28","hashOfConfig":"20"},{"size":2408,"mtime":1612961482043,"results":"29","hashOfConfig":"20"},{"size":9649,"mtime":1612504451840,"results":"30","hashOfConfig":"20"},{"size":2375,"mtime":1612961530858,"results":"31","hashOfConfig":"20"},{"size":4503,"mtime":1612962510332,"results":"32","hashOfConfig":"20"},{"size":5698,"mtime":1612957505645,"results":"33","hashOfConfig":"20"},{"size":5750,"mtime":1612957145140,"results":"34","hashOfConfig":"20"},{"size":9037,"mtime":1612962053417,"results":"35","hashOfConfig":"20"},{"size":8895,"mtime":1612962124656,"results":"36","hashOfConfig":"20"},{"size":1315,"mtime":1612964433681,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"10hoyj8",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"40"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"40"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\index.js",[],["88","89"],"C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\reportWebVitals.js",[],"C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\App.js",["90"],"import './App.css';\nimport {BrowserRouter, Link, Route, Switch} from 'react-router-dom';\nimport Navbar from './components/Navbar/Navbar';\nimport HomeScreen from './components/Screens/HomeScreen/HomeScreen';\nimport SignIn from './components/Screens/SignIn/SignIn';\nimport SignUp from './components/Screens/SignUp/SignUp';\nimport OrganizationSignIn from './components/Screens/OrganizationSignIn/OrganizationSignIn';\nimport OrganizationSignUp from './components/Screens/OrganizationSignUp/OrganizationSignUp';\nimport CreatePersonalPoll from './components/Screens/CreatePersonalPoll/CreatePersonalPoll';\nimport CreateOrganizationPoll from './components/Screens/CreateOrganizationPoll/CreateOrgnizationPoll';\nimport AllOrganizationPolls from './components/Screens/AllOrganizationPolls/AllOrganizationPolls';\nimport AllPersonalPolls from './components/Screens/AllPersonalPolls/AllPersonalPolls';\nimport OrganizationProfile from './components/Screens/OrganizationProfile/OrganizationProfile';\nimport OrganizationPoll from './components/Screens/OrganizationPoll/OrganizationPoll';\nimport PersonalPoll from './components/Screens/PersonalPoll/PersonalPoll';\nimport Footer from './components/Footer/Footer';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <header>\n        <Navbar />\n      </header>\n      <div className=\"screens\">\n      <Switch>\n        <Route exact path=\"/\" component={HomeScreen} />\n        <Route path=\"/signin\" component={SignIn} />\n        <Route path=\"/signup\" component={SignUp} />\n        <Route path=\"/organizationsignin\" component={OrganizationSignIn} />\n        <Route path=\"/organizationsignup\" component={OrganizationSignUp} />\n        <Route path=\"/createpersonalpoll\" component={CreatePersonalPoll} />\n        <Route path=\"/createorganizationpoll\" component={CreateOrganizationPoll} />\n        <Route path=\"/allorganizationpolls\" component={AllOrganizationPolls} />\n        <Route path=\"/allpersonalpolls\" component={AllPersonalPolls} />\n        <Route path=\"/organizationprofile/:id\" component={OrganizationProfile} />\n        <Route path=\"/organizationpoll/:id\" component={OrganizationPoll} />\n        <Route path=\"/personalpoll/:id\" component={PersonalPoll} />\n      </Switch>\n      </div>\n      <Footer></Footer>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Navbar\\Navbar.js",["91","92","93"],"C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\HomeScreen\\HomeScreen.js",["94","95"],"C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\SignIn\\SignIn.js",["96"],"import {useState, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport './SignIn.css';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nconst jwt = require('jsonwebtoken');\r\n\r\ntoast.configure();\r\n\r\nconst SignIn = ()=>{\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        try{\r\n            const decodedToken = jwt.verify(localStorage.getItem(\"organization\"),process.env.REACT_APP_JWT_SECRET);\r\n            history.push(`/organizationprofile/${decodedToken._id}`);\r\n        }catch{\r\n            \r\n        }\r\n    },[]);\r\n\r\n    const PostData = ()=>{\r\n        if(!email){\r\n            toast.error('Please enter email!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n        }else if(!password){\r\n            toast.error('Please enter password!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n        }else{\r\n            fetch(\"http://localhost:5000/user/signin\",\r\n            {\r\n                method: \"post\",\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\",\r\n                },\r\n                body: JSON.stringify({\r\n                    email: email,\r\n                    password: password\r\n                }),\r\n            })\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                console.log(result);\r\n                if(result.message===\"Logged in successfully!\"){\r\n                    toast.success('Logged in successfully!', {\r\n                        position: \"top-right\",\r\n                        autoClose: 2000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        });\r\n                    localStorage.setItem(\"user\",result.token);\r\n                    history.push('/allorganizationpolls');\r\n                    window.location.reload();\r\n                }else{\r\n                    toast.error('Invalid credentials!', {\r\n                        position: \"top-right\",\r\n                        autoClose: 2000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        });\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"login_card\">\r\n                <h1 className=\"signin_heading\">SIGN IN</h1>\r\n                <div className=\"signin_details\">\r\n                <TextField\r\n                    id=\"outlined-primary\"\r\n                    placeholder=\"Enter your email\"\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onChange={(e)=>{setEmail(e.target.value)}}\r\n                />\r\n                <br></br>\r\n                <TextField\r\n                    style={{marginTop:\"30px\"}}\r\n                    id=\"outlined-primary\"\r\n                    placeholder=\"Enter your password\"\r\n                    variant=\"outlined\"\r\n                    type=\"password\"\r\n                    color=\"primary\"\r\n                    onChange={(e)=>{setPassword(e.target.value)}}\r\n                />\r\n                <div className=\"signin_button\"\r\n                onClick={()=>{PostData()}}>\r\n                    SIGN IN\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignIn;","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\SignUp\\SignUp.js",["97","98","99","100","101","102"],"import {useState, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport './SignUp.css';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nconst jwt = require('jsonwebtoken');\r\n\r\ntoast.configure();\r\n\r\nconst SignUp = ()=>{\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [image,setImage] = useState(\"\");\r\n    const [url, setUrl] = useState(undefined);\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        try{\r\n            const decodedToken = jwt.verify(localStorage.getItem(\"organization\"),process.env.REACT_APP_JWT_SECRET);\r\n            history.push(`/organizationprofile/${decodedToken._id}`);\r\n        }catch{\r\n            \r\n        }\r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n        if(!name || !password || !url || !email){\r\n            toast('Please enter all credentials to sign up!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n        }else{\r\n            fetch(\"http://localhost:5000/user/signup\",\r\n            {\r\n                method:\"post\",\r\n                headers:{\r\n                    \"Content-type\":\"application/json\",\r\n                },\r\n                body:JSON.stringify({\r\n                    name: name,\r\n                    email: email,\r\n                    password: password,\r\n                    pic: url\r\n                }),\r\n            })\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                if(result.message===\"Saved user successfully!\"){\r\n                    toast.success('Saved user successfully!', {\r\n                        position: \"top-right\",\r\n                        autoClose: 2000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        });\r\n                        history.push('/signin');\r\n                }else{\r\n                    toast.error('Some error occured!', {\r\n                        position: \"top-right\",\r\n                        autoClose: 2000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        });\r\n                }\r\n            })\r\n        }\r\n    },[url]);\r\n\r\n    const UploadImage = ()=>{\r\n        const data = new FormData();\r\n        data.append(\"file\",image);\r\n        data.append(\"upload_preset\",\"polling-app\");\r\n        data.append(\"cloud_name\",\"vijayscloud\");\r\n        fetch(\"https://api.cloudinary.com/v1_1/vijayscloud/image/upload\",\r\n        {method:\"post\",\r\n        body:data\r\n        })\r\n        .then(res=>res.json())\r\n        .then(data=>{\r\n            console.log(data.url)\r\n            setUrl(data.url)\r\n            if(data.url===undefined){\r\n                toast.error('Some error occured!', {\r\n                    position: \"top-right\",\r\n                    autoClose: 2000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    });\r\n            }\r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    const PostData = ()=>{\r\n        if(!name){\r\n            toast.error('Please enter name!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n            return;\r\n        }\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        if(!re.test(email)){\r\n            toast.error('Invalid email!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n            return;\r\n        }\r\n        if(password.length<8){\r\n            toast.error('Password length should be atleast 8!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n            return;\r\n        }\r\n        UploadImage();\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"singup_card\">\r\n                <h1 className=\"signup_heading\">SIGN UP</h1>\r\n                <div className=\"signup_details\">\r\n                <TextField\r\n                    id=\"outlined-primary\"\r\n                    placeholder=\"Enter your name\"\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onChange={(e)=>{setName(e.target.value)}}\r\n                />\r\n                <br></br>\r\n                <TextField\r\n                style={{marginTop:\"30px\"}}\r\n                    id=\"outlined-primary\"\r\n                    placeholder=\"Enter your email\"\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onChange={(e)=>{setEmail(e.target.value)}}\r\n                />\r\n                <br></br>\r\n                <TextField\r\n                style={{marginTop:\"30px\"}}\r\n                    id=\"outlined-primary\"\r\n                    placeholder=\"Enter your password\"\r\n                    variant=\"outlined\"\r\n                    type=\"password\"\r\n                    color=\"primary\"\r\n                    onChange={(e)=>{setPassword(e.target.value)}}\r\n                />\r\n                <br></br>\r\n                <input style={{marginLeft:\"35px\",marginTop:\"30px\"}} type=\"file\" onChange={(e)=>{\r\n                    setImage(e.target.files[0]);\r\n                }} />\r\n                <div className=\"signup_button\"\r\n                onClick={()=>PostData()}>\r\n                    SIGN UP\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUp;","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\OrganizationSignIn\\OrganizationSignIn.js",["103","104"],"import {useState, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport './OrganizationSignIn.css';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nconst jwt = require('jsonwebtoken');\r\n\r\ntoast.configure();\r\n\r\nconst OraganizationSignIn = ()=>{\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        try{\r\n            const decodedToken = jwt.verify(localStorage.getItem(\"user\"),process.env.REACT_APP_JWT_SECRET);\r\n            history.push(`/allorganizationpolls`);\r\n        }catch{\r\n            \r\n        }\r\n    },[]);\r\n\r\n    const PostData = ()=>{\r\n        if(!email){\r\n            toast.error('Please enter email!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n        }else if(!password){\r\n            toast.error('Please enter password!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n        }else{\r\n            fetch(\"http://localhost:5000/organization/signin\",\r\n            {\r\n                method: \"post\",\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\",\r\n                },\r\n                body: JSON.stringify({\r\n                    email: email,\r\n                    password: password\r\n                }),\r\n            })\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                console.log(result);\r\n                if(result.message===\"Logged in successfully!\"){\r\n                    toast.success('Logged in successfully!', {\r\n                        position: \"top-right\",\r\n                        autoClose: 2000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        });\r\n                    localStorage.setItem(\"organization\",result.token)\r\n                    history.push('/signin');\r\n                    window.location.reload();\r\n                }else{\r\n                    toast.error('Invalid credentials!', {\r\n                        position: \"top-right\",\r\n                        autoClose: 2000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        });\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"org_login_card\">\r\n                <h1 className=\"org_signin_heading\">ORG SIGN IN</h1>\r\n                <div className=\"org_signin_details\">\r\n                <TextField\r\n                    id=\"outlined-primary\"\r\n                    placeholder=\"Enter your email\"\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onChange={(e)=>{setEmail(e.target.value)}}\r\n                />\r\n                <br></br>\r\n                <TextField\r\n                style={{marginTop:\"30px\"}}\r\n                    id=\"outlined-primary\"\r\n                    placeholder=\"Enter your password\"\r\n                    variant=\"outlined\"\r\n                    type=\"password\"\r\n                    color=\"primary\"\r\n                    onChange={(e)=>{setPassword(e.target.value)}}\r\n                />\r\n                <div className=\"org_signin_button\"\r\n                onClick={()=>{PostData()}}>\r\n                    SIGN IN\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OraganizationSignIn;","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\OrganizationSignUp\\OrganizationSignUp.js",["105","106","107","108","109","110","111"],"import {useState, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport './OrganizationSignUp.css';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nconst jwt = require('jsonwebtoken');\r\n\r\ntoast.configure();\r\n\r\nconst OraganizationSignUp = ()=>{\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [image,setImage] = useState(\"\");\r\n    const [url, setUrl] = useState(undefined);\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        try{\r\n            const decodedToken = jwt.verify(localStorage.getItem(\"user\"),process.env.REACT_APP_JWT_SECRET);\r\n            history.push(`/allorganizationpolls`);\r\n        }catch{\r\n            \r\n        }\r\n    },[]);\r\n    \r\n    useEffect(()=>{\r\n        if(!name || !password || !url || !email){\r\n            toast('Please enter all credentials to sign up!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n        }else{\r\n            fetch(\"http://localhost:5000/organization/signup\",\r\n            {\r\n                method:\"post\",\r\n                headers:{\r\n                    \"Content-type\":\"application/json\",\r\n                },\r\n                body:JSON.stringify({\r\n                    name: name,\r\n                    email: email,\r\n                    password: password,\r\n                    pic: url\r\n                }),\r\n            })\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                if(result.message===\"Saved organization successfully!\"){\r\n                    toast.success('Saved organization successfully!', {\r\n                        position: \"top-right\",\r\n                        autoClose: 2000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        });\r\n                        history.push('/organizationsignin');\r\n                }else{\r\n                    toast.error('Some error occured!', {\r\n                        position: \"top-right\",\r\n                        autoClose: 2000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        });\r\n                }\r\n            })\r\n        }\r\n    },[url]);\r\n\r\n    const UploadImage = ()=>{\r\n        const data = new FormData();\r\n        data.append(\"file\",image);\r\n        data.append(\"upload_preset\",\"polling-app\");\r\n        data.append(\"cloud_name\",\"vijayscloud\");\r\n        fetch(\"https://api.cloudinary.com/v1_1/vijayscloud/image/upload\",\r\n        {method:\"post\",\r\n        body:data\r\n        })\r\n        .then(res=>res.json())\r\n        .then(data=>{\r\n            console.log(data.url)\r\n            setUrl(data.url)\r\n            if(data.url===undefined){\r\n                toast.error('Some error occured!', {\r\n                    position: \"top-right\",\r\n                    autoClose: 2000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: true,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                    });\r\n            }\r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    const PostData = ()=>{\r\n        if(!name){\r\n            toast.error('Please enter name!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n            return;\r\n        }\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        if(!re.test(email)){\r\n            toast.error('Invalid email!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n            return;\r\n        }\r\n        if(password.length<8){\r\n            toast.error('Password length should be atleast 8!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n            return;\r\n        }\r\n        UploadImage();\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"org_singup_card\">\r\n                <h1 className=\"org_signup_heading\">ORG SIGN UP</h1>\r\n                <div className=\"org_signup_details\">\r\n                <TextField\r\n                    id=\"outlined-primary\"\r\n                    placeholder=\"Enter your name\"\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onChange={(e)=>{setName(e.target.value)}}\r\n                />\r\n                <br></br>\r\n                <TextField\r\n                style={{marginTop:\"30px\"}}\r\n                    id=\"outlined-primary\"\r\n                    placeholder=\"Enter your email\"\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    onChange={(e)=>{setEmail(e.target.value)}}\r\n                />\r\n                <br></br>\r\n                <TextField\r\n                style={{marginTop:\"30px\"}}\r\n                    id=\"outlined-primary\"\r\n                    placeholder=\"Enter your password\"\r\n                    variant=\"outlined\"\r\n                    type=\"password\"\r\n                    color=\"primary\"\r\n                    onChange={(e)=>{setPassword(e.target.value)}}\r\n                />\r\n                <br></br>\r\n                <input style={{marginLeft:\"35px\",marginTop:\"30px\"}} type=\"file\" onChange={(e)=>{\r\n                    setImage(e.target.files[0]);\r\n                }} />\r\n                <div className=\"org_signup_button\"\r\n                onClick={()=>PostData()}>\r\n                    SIGN UP\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OraganizationSignUp;","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\AllOrganizationPolls\\AllOrganizationPolls.js",["112","113","114"],"import {useState, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport \"./AllOrganizationPolls.css\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst AllOrganizationPolls = ()=>{\r\n    const [PollData, setPollData] = useState([]);\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        try{\r\n            const decodedToken = jwt.verify(localStorage.getItem(\"user\"),process.env.REACT_APP_JWT_SECRET)\r\n            fetch(\"http://localhost:5000/poll/organization/getallpolls\",\r\n            {\r\n                method:\"get\",\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\",\r\n                },\r\n            })\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                console.log(result)\r\n                setPollData(result.polls)\r\n            })\r\n        }catch{\r\n            history.push(\"/signin\")\r\n        }\r\n    },[]);\r\n\r\n    return(\r\n        <div className=\"all_content_all_org_polls\">\r\n            <h1>ALL ORGANIZATION POLLS</h1>\r\n            <Grid container>\r\n                {PollData.map((data)=>{\r\n                    return(\r\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <div className=\"poll_card\"\r\n                            onClick={()=>{history.push(`/organizationpoll/${data._id}`)}}>\r\n                                <div className=\"poll_card_content\">\r\n                                <div className=\"color_section\"></div>\r\n                                <img className=\"org_image\" src={data.createdBy.pic} />\r\n                                <h2 className=\"org_name_poll\">{data.createdBy.name}</h2>\r\n                                <p className=\"org_poll_question\">{data.question}</p>\r\n                                <HowToVoteIcon\r\n                                className=\"how_to_vote_icon\"></HowToVoteIcon>\r\n                                <span className=\"vote_count\">{data.votes.length? data.votes.length : 0} votes</span>\r\n                                <div className=\"color_section_bottom\"></div>\r\n                                </div>\r\n                            </div>\r\n                        </Grid> \r\n                    )\r\n                })}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllOrganizationPolls;","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\PollData.js",[],["115","116"],"C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\AllPersonalPolls\\AllPersonalPolls.js",["117","118","119"],"import {useState, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport \"./AllPersonalPolls.css\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst AllPersonalPolls = ()=>{\r\n    const [PollData, setPollData] = useState([]);\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        try{\r\n            const decodedToken = jwt.verify(localStorage.getItem(\"user\"),process.env.REACT_APP_JWT_SECRET)\r\n            fetch(\"http://localhost:5000/poll/personal/getallpolls\",\r\n            {\r\n                method:\"get\",\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\",\r\n                },\r\n            })\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                console.log(result)\r\n                setPollData(result.polls)\r\n            })\r\n        }catch{\r\n            history.push(\"/signin\")\r\n        }\r\n    },[]);\r\n\r\n    return(\r\n        <div className=\"all_content_all_personal_polls\">\r\n            <h1>ALL PERSONAL POLLS</h1>\r\n            <Grid container>\r\n                {PollData.map((data)=>{\r\n                    return(\r\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <div className=\"poll_card\"\r\n                            onClick={()=>{history.push(`/personalpoll/${data._id}`)}}>\r\n                                <div className=\"poll_card_content\">\r\n                                <div className=\"color_section\"></div>\r\n                                <img className=\"person_image\" src={data.createdBy.pic} />\r\n                                <h2 className=\"person_name_poll\">{data.createdBy.name}</h2>\r\n                                <p className=\"person_poll_question\">{data.question}</p>\r\n                                <HowToVoteIcon\r\n                                className=\"how_to_vote_icon\"></HowToVoteIcon>\r\n                                <span className=\"vote_count\">{data.votes.length} votes</span>\r\n                                <div className=\"color_section_bottom\"></div>\r\n                                </div>\r\n                            </div>\r\n                        </Grid> \r\n                    )\r\n                })}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllPersonalPolls;","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\OrganizationProfile\\OrganizationProfile.js",["120","121","122","123"],"import {useState, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport \"./OrganizationProfile.css\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst OrganizationProfile = (props)=>{\r\n    const [orgData, setOrgData] = useState({\r\n        name:\"Loading...\",\r\n        pic:\"Loading...\",\r\n        polls:[],\r\n        email:\"Loading...\"\r\n    });\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        try{\r\n            const decodedToken = jwt.verify(localStorage.getItem(\"user\"),process.env.REACT_APP_JWT_SECRET)\r\n            fetch(\r\n                `http://localhost:5000/organization/${props.location.pathname.substring(21)}`,\r\n                {\r\n                    method: \"get\",\r\n                    headers:{\r\n                        \"Content-type\": \"application/json\",\r\n                    },\r\n                }\r\n            )\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                console.log(result)\r\n                if(result.message===\"Success\"){\r\n                    setOrgData(result.organization)\r\n                }\r\n            })\r\n        }catch{\r\n            try{\r\n                const decodedToken = jwt.verify(localStorage.getItem(\"organization\"),process.env.REACT_APP_JWT_SECRET);\r\n                fetch(\r\n                    `http://localhost:5000/organization/${props.location.pathname.substring(21)}`,\r\n                    {\r\n                        method: \"get\",\r\n                        headers:{\r\n                            \"Content-type\": \"application/json\",\r\n                        },\r\n                    }\r\n                )\r\n                .then(res=>res.json())\r\n                .then(result=>{\r\n                    console.log(result)\r\n                    if(result.message===\"Success\"){\r\n                        setOrgData(result.organization)\r\n                    }\r\n                })\r\n            }catch{\r\n                history.push(\"/signin\")\r\n            }\r\n            \r\n        }\r\n    },[]);\r\n    \r\n    console.log(orgData)\r\n    return(\r\n        <div className=\"org_profile_all_content\">\r\n            <Grid container>\r\n                <Grid item xs={12} sm={12} md={4} lg={3}>\r\n                    <div className=\"org_details\">\r\n                    <div className=\"color_section\"></div>\r\n                    <img src={orgData.pic} className=\"organization_image\"/>\r\n                    <h2 className=\"org_name_profile\">{orgData.name}</h2>\r\n                    <EmailIcon className=\"email_icon_org_profile\"></EmailIcon>\r\n                    <span className=\"org_email\">{orgData.email}</span>\r\n                    <br></br>\r\n                    <HowToVoteIcon className=\"email_icon_org_profile\"></HowToVoteIcon>\r\n                    <span className=\"org_email\">{orgData.polls.length} polls conducted till now</span>\r\n                    <br></br>\r\n                    <div className=\"color_section_bottom\"></div>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={8} lg={9}>\r\n                    <div className=\"org_all_polls\">\r\n                        {orgData.polls.map((data)=>{\r\n                            return(\r\n                                <div className=\"org_poll_card\"\r\n                                onClick={()=>{history.push(`/organizationpoll/${data._id}`)}}>\r\n                                    <div className=\"color_section\"></div>\r\n                                    <h2 className=\"option_content\">{data.question}</h2>\r\n                                    {data.options.map((option,index)=>{\r\n                                        return(\r\n                                            <h3 className=\"option_content\">{index+1+\".\"} {option.optionContent}</h3>\r\n                                        )\r\n                                    })}\r\n                                    <HowToVoteIcon className=\"option_content\"></HowToVoteIcon>\r\n                                    <span style={{verticalAlign:\"top\"}}>{data.votes.length} votes till now</span>\r\n                                    <div className=\"color_section_bottom\"></div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrganizationProfile","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\CreatePersonalPoll\\CreatePersonalPoll.js",["124"],"import {useState, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport './CreatePersonalPoll.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nconst jwt = require('jsonwebtoken');\r\n\r\ntoast.configure();\r\n\r\nconst CreatePersonalPoll = ()=>{\r\n    const [question, setQuestion] = useState(\"\");\r\n    const [options, setOptions] = useState([]);\r\n    const [newOption, setNewOption] = useState(\"\");\r\n    const history = useHistory();\r\n    const [id, setId] = useState(\"\");\r\n\r\n    useEffect(()=>{\r\n        try{\r\n            const decodedToken = jwt.verify(localStorage.getItem(\"user\"),process.env.REACT_APP_JWT_SECRET)\r\n            setId(decodedToken._id);\r\n        }catch{\r\n            history.push(\"/signin\")\r\n        }\r\n    },[]);\r\n\r\n    const PostData = ()=>{\r\n        if(!question){\r\n            toast.error('Please enter a question!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n        }else if(options.length === 0){\r\n            toast.error('Please enter atleast one option!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n        }else{\r\n            fetch(\"http://localhost:5000/poll/createpersonalpoll\",\r\n            {\r\n                method: \"post\",\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\",\r\n                },\r\n                body: JSON.stringify({\r\n                    question: question,\r\n                    options: options,\r\n                    createdBy: id,\r\n                }),\r\n            })\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                console.log(result)\r\n                if(result.message === \"Success!\"){\r\n                    toast.success('Created poll successfully!', {\r\n                        position: \"top-right\",\r\n                        autoClose: 2000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        });\r\n                        history.push(`/personalpoll/${result.poll._id}`);\r\n                }else{\r\n                    toast.error('Some error occured!', {\r\n                        position: \"top-right\",\r\n                        autoClose: 2000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        });\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"create_poll_card\">\r\n            <h1 className=\"create_poll_heading\">CREATE A PERSONAL POLL</h1>\r\n            <Grid container className=\"poll_container\">\r\n                <Grid item xs={12} sm={6} md={4} lg={4}>\r\n                    <h3 className=\"question_heading\">QUESTION : </h3>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={8} lg={8}>\r\n                    <TextField\r\n                        id=\"outlined-primary\"\r\n                        placeholder=\"Enter a question\"\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        fullWidth={true}\r\n                        onChange={(e)=>{setQuestion(e.target.value)}}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={12} lg={12}>\r\n                    <h3 className=\"question_heading\">OPTIONS</h3>\r\n                </Grid>\r\n                {options.map((data,index)=>{\r\n                    index++;\r\n                    return(\r\n                        <Grid style={{marginTop:\"15px\",fontSize:\"1.5rem\"}} item xs={12} sm={12} md={12} lg={12}>\r\n                            {index + \". \" +data.optionContent}\r\n                        </Grid>\r\n                    )\r\n                })}\r\n                <Grid style={{marginTop:\"20px\"}} item xs={12} sm={6} md={8} lg={8}>\r\n                    <TextField\r\n                        id=\"outlined-primary\"\r\n                        placeholder=\"Enter an option\"\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        fullWidth={true}\r\n                        onChange={(e)=>{setNewOption(e.target.value)}}\r\n                        value={newOption}\r\n                    />\r\n                </Grid>\r\n                <Grid style={{marginTop:\"20px\"}} item xs={12} sm={6} md={4} lg={4}>\r\n                    <div className=\"add_option_button\"\r\n                    onClick={()=>{\r\n                        setOptions([...options, {optionContent: newOption, optionIndex: options.length + 1}]);\r\n                        setNewOption(\"\");\r\n                    }}>\r\n                        +\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n            <div className=\"submit_poll_button\"\r\n            onClick = {()=>{PostData()}}>\r\n                    SUBMIT POLL\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreatePersonalPoll;","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\CreateOrganizationPoll\\CreateOrgnizationPoll.js",["125"],"import {useState, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport './CreateOrganizationPoll.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nconst jwt = require('jsonwebtoken');\r\n\r\ntoast.configure();\r\n\r\nconst CreateOrganizationPoll = ()=>{\r\n    const [question, setQuestion] = useState(\"\");\r\n    const [options, setOptions] = useState([]);\r\n    const [newOption, setNewOption] = useState(\"\");\r\n    const history = useHistory();\r\n    const [id, setId] = useState(\"\");\r\n\r\n    useEffect(()=>{\r\n        try{\r\n            const decodedToken = jwt.verify(localStorage.getItem(\"organization\"),process.env.REACT_APP_JWT_SECRET)\r\n            setId(decodedToken._id);\r\n        }catch{\r\n            history.push(\"/organizationsignin\")\r\n        }\r\n    },[]);\r\n\r\n    const PostData = ()=>{\r\n        if(!question){\r\n            toast.error('Please enter a question!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n        }else if(options.length === 0){\r\n            toast.error('Please enter atleast one option!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n        }else{\r\n            fetch(\"http://localhost:5000/poll/createorganizationpoll\",\r\n            {\r\n                method: \"post\",\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\",\r\n                },\r\n                body: JSON.stringify({\r\n                    question: question,\r\n                    options: options,\r\n                    createdBy: id,\r\n                }),\r\n            })\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                console.log(result)\r\n                if(result.message === \"Success!\"){\r\n                    toast.success('Created poll successfully!', {\r\n                        position: \"top-right\",\r\n                        autoClose: 2000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        });\r\n                        history.push(`/organizationprofile/${result.poll.createdBy}`);\r\n                }else{\r\n                    toast.error('Some error occured!', {\r\n                        position: \"top-right\",\r\n                        autoClose: 2000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        });\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"create_poll_card\">\r\n            <h1 className=\"create_poll_heading\">CREATE AN ORGANIZATION POLL</h1>\r\n            <Grid container className=\"poll_container\">\r\n                <Grid item xs={12} sm={6} md={4} lg={4}>\r\n                    <h3 className=\"question_heading\">QUESTION : </h3>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={8} lg={8}>\r\n                    <TextField\r\n                        id=\"outlined-primary\"\r\n                        placeholder=\"Enter a question\"\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        fullWidth={true}\r\n                        onChange={(e)=>{setQuestion(e.target.value)}}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={12} lg={12}>\r\n                    <h3 className=\"question_heading\">OPTIONS</h3>\r\n                </Grid>\r\n                {options.map((data,index)=>{\r\n                    index++;\r\n                    return(\r\n                        <Grid style={{marginTop:\"15px\",fontSize:\"1.5rem\"}} item xs={12} sm={12} md={12} lg={12}>\r\n                            {index + \". \" +data.optionContent}\r\n                        </Grid>\r\n                    )\r\n                })}\r\n                <Grid style={{marginTop:\"20px\"}} item xs={12} sm={6} md={8} lg={8}>\r\n                    <TextField\r\n                        id=\"outlined-primary\"\r\n                        placeholder=\"Enter an option\"\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        fullWidth={true}\r\n                        onChange={(e)=>{setNewOption(e.target.value)}}\r\n                        value={newOption}\r\n                    />\r\n                </Grid>\r\n                <Grid style={{marginTop:\"20px\"}} item xs={12} sm={6} md={4} lg={4}>\r\n                    <div className=\"add_option_button\"\r\n                    onClick={()=>{\r\n                        setOptions([...options, {optionContent: newOption, optionIndex: options.length + 1}]);\r\n                        setNewOption(\"\");\r\n                    }}>\r\n                        +\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n            <div className=\"submit_poll_button\"\r\n            onClick={()=>{PostData()}}>\r\n                    SUBMIT POLL\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateOrganizationPoll;","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\OrganizationPoll\\OrganizationPoll.js",["126","127"],"import {useState, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport './OrganizationPoll.css';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nconst jwt = require('jsonwebtoken');\r\n\r\ntoast.configure();\r\n\r\nconst OrganizationPoll = (props)=>{\r\n    const [userId, setUserId] = useState(\"\");\r\n    const [pollData, setPollData] = useState({\r\n        question: \"Loading...\",\r\n        options: [\r\n            {\r\n                optionContent:\"Loading...\",\r\n                optionIndex:\"1\"\r\n            },\r\n            {\r\n                optionContent:\"Loading...\",\r\n                optionIndex:\"2\"\r\n            },\r\n            {\r\n                optionContent:\"Loading...\",\r\n                optionIndex:\"2\"\r\n            }\r\n        ],\r\n        createdBy:{\r\n            name:\"Loading...\"\r\n        },\r\n        votes:[1,2,2,2,2,3,3,3,3]\r\n    });\r\n    const [vote, setVote] = useState(undefined);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [optionCount, setOptionCount] = useState([1,4,4]);\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        try{\r\n            const decodedToken = jwt.verify(localStorage.getItem(\"user\"),process.env.REACT_APP_JWT_SECRET);\r\n            setUserId(decodedToken._id);\r\n            fetch(\r\n                `http://localhost:5000/poll/organization/${props.location.pathname.substring(18)}`,\r\n                {\r\n                    method: \"get\",\r\n                    headers:{\r\n                        \"Content-type\": \"application/json\",\r\n                    },\r\n                }\r\n            )\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                console.log(result)\r\n                if(result.message===\"Success\"){\r\n                    setPollData(result.poll);\r\n                    var op = new Array(result.poll.options.length).fill(0);\r\n                    try{\r\n                    if(result.poll.votes!==[]){\r\n                        result.poll.votes.forEach((data)=>{\r\n                            op[data.option-1]++;\r\n                        });\r\n                    }\r\n                    }catch{\r\n\r\n                    }\r\n                    setOptionCount(op);\r\n\r\n                }\r\n            })\r\n        }catch{\r\n            history.push(\"/signin\")\r\n        }\r\n    },[]);\r\n\r\n    const voteButtonHandler = ()=>{\r\n        if(pollData.votes.find((data)=>{return data.votedBy===userId})){\r\n            toast.error('Already voted to this poll!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n        }else{\r\n            console.log(\"Good to go\");\r\n            setDialogOpen(true);\r\n        }\r\n    }\r\n\r\n    const PostData = ()=>{\r\n        if(vote === undefined){\r\n            toast.error('Please select an option!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n        }else{\r\n            console.log(vote);\r\n            const index = pollData.options.findIndex((data)=>{return data.optionContent===vote})+1;\r\n            console.log(index)\r\n            fetch(\r\n                `http://localhost:5000/poll/organization/vote/${props.location.pathname.substring(18)}`,\r\n                {\r\n                    method: \"post\",\r\n                    headers:{\r\n                        \"Content-type\": \"application/json\",\r\n                    },\r\n                    body:JSON.stringify({\r\n                        userId: userId,\r\n                        option: index\r\n                    }),\r\n                }\r\n            )\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                console.log(result);\r\n                if(result.poll){\r\n                    toast.success('Successfully voted to this poll', {\r\n                        position: \"top-right\",\r\n                        autoClose: 2000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        });\r\n                        window.location.reload();\r\n                }else{\r\n                    toast.error('Some error occured!', {\r\n                        position: \"top-right\",\r\n                        autoClose: 2000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        });\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"poll_all_content\">\r\n                <h1 className=\"question\">QUESTION</h1>\r\n                <h2>{pollData.question}</h2>\r\n                <h1>OPTIONS</h1>\r\n                {pollData.options.map((data,index)=>{\r\n                    return(\r\n                        <p>{index+1} . {data.optionContent}</p>\r\n                    )\r\n                })}\r\n                <HowToVoteIcon></HowToVoteIcon>\r\n                <span className=\"vote_count\">{pollData.votes.length} votes till now</span>\r\n                <p className=\"vote_count\"\r\n                style={{cursor:\"pointer\"}}\r\n                onClick={()=>{history.push(`/organizationprofile/${pollData.createdBy._id}`)}}>Conducted By : {pollData.createdBy.name}</p>\r\n                <h1>RESULTS</h1>\r\n                \r\n                    {pollData.options.map((data,index)=>{\r\n                        return(\r\n                            <Grid container>\r\n                                <Grid item xs={12} sm={12} md={9} lg={9}>\r\n                                    <div className=\"bar\" style={{width:pollData.votes.length?optionCount[index]/pollData.votes.length*100+\"%\":\"0.5%\"}}>\r\n                                    \r\n                                    </div>\r\n                                </Grid> \r\n                                <Grid item xs={12} sm={12} md={3} lg={3}>\r\n                                {\r\n                                    pollData.votes.length\r\n                                    ?\r\n                                    <p>{optionCount[index]} votes ({(optionCount[index]/pollData.votes.length*100).toFixed(2)+\"%\"}) {data.optionContent}</p>\r\n                                    :\r\n                                    <p>0 votes (0%) {data.optionContent}</p>\r\n                                }\r\n                                \r\n                                </Grid>  \r\n                            </Grid>\r\n                        );\r\n                    })} \r\n                <div className=\"vote\"\r\n                onClick={()=>{voteButtonHandler()}}>\r\n                    <SendIcon></SendIcon>\r\n                    <span className=\"vote_count\">VOTE</span>\r\n                </div>\r\n                \r\n                <Dialog\r\n                open={dialogOpen}\r\n                onBackdropClick={()=>{setDialogOpen(false)}}>\r\n                    <div className=\"dialog\">\r\n                        <FormControl style={{width:\"100%\"}} component=\"fieldset\">\r\n                        <h2 className=\"options_dialog\">OPTIONS</h2>\r\n                        <RadioGroup aria-label=\"Options\" name=\"options\" value={vote} onChange={(e)=>{setVote(e.target.value)}}>\r\n                            {pollData.options.map((data)=>{\r\n                                return(\r\n                                    <FormControlLabel value={data.optionContent} control={<Radio color=\"primary\" />} label={data.optionContent} />\r\n                                );\r\n                            })}\r\n                            <div className=\"vote\"\r\n                            onClick={()=>{PostData()}}>\r\n                                <SendIcon></SendIcon>\r\n                                <span className=\"vote_count\">VOTE</span>\r\n                            </div>\r\n                        </RadioGroup>\r\n                        </FormControl>\r\n                    </div>\r\n                </Dialog>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrganizationPoll;","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\PersonalPoll\\PersonalPoll.js",["128","129"],"import {useState, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport './PersonalPoll.css';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nconst jwt = require('jsonwebtoken');\r\n\r\ntoast.configure();\r\n\r\nconst PersonalPoll = (props)=>{\r\n    const [userId, setUserId] = useState(\"\");\r\n    const [pollData, setPollData] = useState({\r\n        question: \"Loading...\",\r\n        options: [\r\n            {\r\n                optionContent:\"Loading...\",\r\n                optionIndex:\"1\"\r\n            },\r\n            {\r\n                optionContent:\"Loading...\",\r\n                optionIndex:\"2\"\r\n            },\r\n            {\r\n                optionContent:\"Loading...\",\r\n                optionIndex:\"2\"\r\n            }\r\n        ],\r\n        createdBy:{\r\n            name:\"Loading...\"\r\n        },\r\n        votes:[1,2,2,2,2,3,3,3,3]\r\n    });\r\n    const [vote, setVote] = useState(undefined);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [optionCount, setOptionCount] = useState([1,4,4]);\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        try{\r\n            const decodedToken = jwt.verify(localStorage.getItem(\"user\"),process.env.REACT_APP_JWT_SECRET);\r\n            setUserId(decodedToken._id);\r\n            fetch(\r\n                `http://localhost:5000/poll/personal/${props.location.pathname.substring(14)}`,\r\n                {\r\n                    method: \"get\",\r\n                    headers:{\r\n                        \"Content-type\": \"application/json\",\r\n                    },\r\n                }\r\n            )\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                console.log(result)\r\n                if(result.message===\"Success\"){\r\n                    setPollData(result.poll);\r\n                    var op = new Array(result.poll.options.length).fill(0);\r\n                    try{\r\n                    if(result.poll.votes!==[]){\r\n                        result.poll.votes.forEach((data)=>{\r\n                            op[data.option-1]++;\r\n                        });\r\n                    }\r\n                    }catch{\r\n\r\n                    }\r\n                    setOptionCount(op);\r\n\r\n                }\r\n            })\r\n        }catch{\r\n            history.push(\"/signin\")\r\n        }\r\n    },[]);\r\n\r\n    const voteButtonHandler = ()=>{\r\n        if(pollData.votes.find((data)=>{return data.votedBy===userId})){\r\n            toast.error('Already voted to this poll!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n        }else{\r\n            console.log(\"Good to go\");\r\n            setDialogOpen(true);\r\n        }\r\n    }\r\n\r\n    const PostData = ()=>{\r\n        if(vote === undefined){\r\n            toast.error('Please select an option!', {\r\n                position: \"top-right\",\r\n                autoClose: 2000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n        }else{\r\n            console.log(vote);\r\n            const index = pollData.options.findIndex((data)=>{return data.optionContent===vote})+1;\r\n            console.log(index)\r\n            fetch(\r\n                `http://localhost:5000/poll/personal/vote/${props.location.pathname.substring(14)}`,\r\n                {\r\n                    method: \"post\",\r\n                    headers:{\r\n                        \"Content-type\": \"application/json\",\r\n                    },\r\n                    body:JSON.stringify({\r\n                        userId: userId,\r\n                        option: index\r\n                    }),\r\n                }\r\n            )\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                console.log(result);\r\n                if(result.poll){\r\n                    toast.success('Successfully voted to this poll', {\r\n                        position: \"top-right\",\r\n                        autoClose: 2000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        });\r\n                        window.location.reload();\r\n                }else{\r\n                    toast.error('Some error occured!', {\r\n                        position: \"top-right\",\r\n                        autoClose: 2000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: true,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                        });\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"poll_all_content\">\r\n                <h1 className=\"question\">QUESTION</h1>\r\n                <h2>{pollData.question}</h2>\r\n                <h1>OPTIONS</h1>\r\n                {pollData.options.map((data,index)=>{\r\n                    return(\r\n                        <p>{index+1} . {data.optionContent}</p>\r\n                    )\r\n                })}\r\n                <HowToVoteIcon></HowToVoteIcon>\r\n                <span className=\"vote_count\">{pollData.votes.length} votes till now</span>\r\n                <p className=\"vote_count\"\r\n                >Conducted By : {pollData.createdBy.name}</p>\r\n                <h1>RESULTS</h1>\r\n                \r\n                    {pollData.options.map((data,index)=>{\r\n                        return(\r\n                            <Grid container>\r\n                                <Grid item xs={12} sm={12} md={9} lg={9}>\r\n                                    <div className=\"bar\" style={{width:pollData.votes.length?optionCount[index]/pollData.votes.length*100+\"%\":\"0.5%\"}}>\r\n                                    \r\n                                    </div>\r\n                                </Grid> \r\n                                <Grid item xs={12} sm={12} md={3} lg={3}>\r\n                                {\r\n                                    pollData.votes.length\r\n                                    ?\r\n                                    <p>{optionCount[index]} votes ({(optionCount[index]/pollData.votes.length*100).toFixed(2)+\"%\"}) {data.optionContent}</p>\r\n                                    :\r\n                                    <p>0 votes (0%) {data.optionContent}</p>\r\n                                }\r\n                                \r\n                                </Grid>  \r\n                            </Grid>\r\n                        );\r\n                    })} \r\n                <div className=\"vote\"\r\n                onClick={()=>{voteButtonHandler()}}>\r\n                    <SendIcon></SendIcon>\r\n                    <span className=\"vote_count\">VOTE</span>\r\n                </div>\r\n                \r\n                <Dialog\r\n                open={dialogOpen}\r\n                onBackdropClick={()=>{setDialogOpen(false)}}>\r\n                    <div className=\"dialog\">\r\n                        <FormControl style={{width:\"100%\"}} component=\"fieldset\">\r\n                        <h2 className=\"options_dialog\">OPTIONS</h2>\r\n                        <RadioGroup aria-label=\"Options\" name=\"options\" value={vote} onChange={(e)=>{setVote(e.target.value)}}>\r\n                            {pollData.options.map((data)=>{\r\n                                return(\r\n                                    <FormControlLabel value={data.optionContent} control={<Radio color=\"primary\" />} label={data.optionContent} />\r\n                                );\r\n                            })}\r\n                            <div className=\"vote\"\r\n                            onClick={()=>{PostData()}}>\r\n                                <SendIcon></SendIcon>\r\n                                <span className=\"vote_count\">VOTE</span>\r\n                            </div>\r\n                        </RadioGroup>\r\n                        </FormControl>\r\n                    </div>\r\n                </Dialog>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PersonalPoll;","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Footer\\Footer.js",[],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":2,"column":24,"nodeType":"136","messageId":"137","endLine":2,"endColumn":28},{"ruleId":"134","severity":1,"message":"138","line":20,"column":13,"nodeType":"136","messageId":"137","endLine":20,"endColumn":25},{"ruleId":"134","severity":1,"message":"138","line":25,"column":15,"nodeType":"136","messageId":"137","endLine":25,"endColumn":27},{"ruleId":"139","severity":1,"message":"140","line":31,"column":6,"nodeType":"141","endLine":31,"endColumn":34},{"ruleId":"142","severity":1,"message":"143","line":27,"column":21,"nodeType":"144","endLine":27,"endColumn":60},{"ruleId":"142","severity":1,"message":"143","line":112,"column":17,"nodeType":"144","endLine":112,"endColumn":60},{"ruleId":"139","severity":1,"message":"145","line":23,"column":7,"nodeType":"146","endLine":23,"endColumn":9,"suggestions":"147"},{"ruleId":"139","severity":1,"message":"145","line":26,"column":7,"nodeType":"146","endLine":26,"endColumn":9,"suggestions":"148"},{"ruleId":"139","severity":1,"message":"149","line":79,"column":7,"nodeType":"146","endLine":79,"endColumn":12,"suggestions":"150"},{"ruleId":"151","severity":1,"message":"152","line":124,"column":42,"nodeType":"153","messageId":"154","endLine":124,"endColumn":43,"suggestions":"155"},{"ruleId":"151","severity":1,"message":"152","line":124,"column":67,"nodeType":"153","messageId":"154","endLine":124,"endColumn":68,"suggestions":"156"},{"ruleId":"151","severity":1,"message":"152","line":124,"column":76,"nodeType":"153","messageId":"154","endLine":124,"endColumn":77,"suggestions":"157"},{"ruleId":"151","severity":1,"message":"152","line":124,"column":80,"nodeType":"153","messageId":"154","endLine":124,"endColumn":81,"suggestions":"158"},{"ruleId":"134","severity":1,"message":"138","line":18,"column":19,"nodeType":"136","messageId":"137","endLine":18,"endColumn":31},{"ruleId":"139","severity":1,"message":"145","line":23,"column":7,"nodeType":"146","endLine":23,"endColumn":9,"suggestions":"159"},{"ruleId":"134","severity":1,"message":"138","line":21,"column":19,"nodeType":"136","messageId":"137","endLine":21,"endColumn":31},{"ruleId":"139","severity":1,"message":"145","line":26,"column":7,"nodeType":"146","endLine":26,"endColumn":9,"suggestions":"160"},{"ruleId":"139","severity":1,"message":"149","line":79,"column":7,"nodeType":"146","endLine":79,"endColumn":12,"suggestions":"161"},{"ruleId":"151","severity":1,"message":"152","line":124,"column":42,"nodeType":"153","messageId":"154","endLine":124,"endColumn":43,"suggestions":"162"},{"ruleId":"151","severity":1,"message":"152","line":124,"column":67,"nodeType":"153","messageId":"154","endLine":124,"endColumn":68,"suggestions":"163"},{"ruleId":"151","severity":1,"message":"152","line":124,"column":76,"nodeType":"153","messageId":"154","endLine":124,"endColumn":77,"suggestions":"164"},{"ruleId":"151","severity":1,"message":"152","line":124,"column":80,"nodeType":"153","messageId":"154","endLine":124,"endColumn":81,"suggestions":"165"},{"ruleId":"134","severity":1,"message":"138","line":14,"column":19,"nodeType":"136","messageId":"137","endLine":14,"endColumn":31},{"ruleId":"139","severity":1,"message":"145","line":30,"column":7,"nodeType":"146","endLine":30,"endColumn":9,"suggestions":"166"},{"ruleId":"142","severity":1,"message":"143","line":43,"column":33,"nodeType":"144","endLine":43,"endColumn":87},{"ruleId":"130","replacedBy":"167"},{"ruleId":"132","replacedBy":"168"},{"ruleId":"134","severity":1,"message":"138","line":14,"column":19,"nodeType":"136","messageId":"137","endLine":14,"endColumn":31},{"ruleId":"139","severity":1,"message":"145","line":30,"column":7,"nodeType":"146","endLine":30,"endColumn":9,"suggestions":"169"},{"ruleId":"142","severity":1,"message":"143","line":43,"column":33,"nodeType":"144","endLine":43,"endColumn":90},{"ruleId":"134","severity":1,"message":"138","line":20,"column":19,"nodeType":"136","messageId":"137","endLine":20,"endColumn":31},{"ruleId":"134","severity":1,"message":"138","line":39,"column":23,"nodeType":"136","messageId":"137","endLine":39,"endColumn":35},{"ruleId":"139","severity":1,"message":"170","line":61,"column":7,"nodeType":"146","endLine":61,"endColumn":9,"suggestions":"171"},{"ruleId":"142","severity":1,"message":"143","line":70,"column":21,"nodeType":"144","endLine":70,"endColumn":76},{"ruleId":"139","severity":1,"message":"145","line":26,"column":7,"nodeType":"146","endLine":26,"endColumn":9,"suggestions":"172"},{"ruleId":"139","severity":1,"message":"145","line":26,"column":7,"nodeType":"146","endLine":26,"endColumn":9,"suggestions":"173"},{"ruleId":"134","severity":1,"message":"174","line":8,"column":8,"nodeType":"136","messageId":"137","endLine":8,"endColumn":17},{"ruleId":"139","severity":1,"message":"170","line":82,"column":7,"nodeType":"146","endLine":82,"endColumn":9,"suggestions":"175"},{"ruleId":"134","severity":1,"message":"174","line":8,"column":8,"nodeType":"136","messageId":"137","endLine":8,"endColumn":17},{"ruleId":"139","severity":1,"message":"170","line":82,"column":7,"nodeType":"146","endLine":82,"endColumn":9,"suggestions":"176"},"no-native-reassign",["177"],"no-negated-in-lhs",["178"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'decodedToken' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["179"],["180"],"React Hook useEffect has missing dependencies: 'email', 'history', 'name', and 'password'. Either include them or remove the dependency array.",["181"],"no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["182","183"],["184","185"],["186","187"],["188","189"],["190"],["191"],["192"],["193","194"],["195","196"],["197","198"],["199","200"],["201"],["177"],["178"],["202"],"React Hook useEffect has missing dependencies: 'history' and 'props.location.pathname'. Either include them or remove the dependency array.",["203"],["204"],["205"],"'FormLabel' is defined but never used.",["206"],["207"],"no-global-assign","no-unsafe-negation",{"desc":"208","fix":"209"},{"desc":"208","fix":"210"},{"desc":"211","fix":"212"},{"messageId":"213","fix":"214","desc":"215"},{"messageId":"216","fix":"217","desc":"218"},{"messageId":"213","fix":"219","desc":"215"},{"messageId":"216","fix":"220","desc":"218"},{"messageId":"213","fix":"221","desc":"215"},{"messageId":"216","fix":"222","desc":"218"},{"messageId":"213","fix":"223","desc":"215"},{"messageId":"216","fix":"224","desc":"218"},{"desc":"208","fix":"225"},{"desc":"208","fix":"226"},{"desc":"211","fix":"227"},{"messageId":"213","fix":"228","desc":"215"},{"messageId":"216","fix":"229","desc":"218"},{"messageId":"213","fix":"230","desc":"215"},{"messageId":"216","fix":"231","desc":"218"},{"messageId":"213","fix":"232","desc":"215"},{"messageId":"216","fix":"233","desc":"218"},{"messageId":"213","fix":"234","desc":"215"},{"messageId":"216","fix":"235","desc":"218"},{"desc":"208","fix":"236"},{"desc":"208","fix":"237"},{"desc":"238","fix":"239"},{"desc":"208","fix":"240"},{"desc":"208","fix":"241"},{"desc":"238","fix":"242"},{"desc":"238","fix":"243"},"Update the dependencies array to be: [history]",{"range":"244","text":"245"},{"range":"246","text":"245"},"Update the dependencies array to be: [email, history, name, password, url]",{"range":"247","text":"248"},"removeEscape",{"range":"249","text":"250"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"251","text":"252"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"253","text":"250"},{"range":"254","text":"252"},{"range":"255","text":"250"},{"range":"256","text":"252"},{"range":"257","text":"250"},{"range":"258","text":"252"},{"range":"259","text":"245"},{"range":"260","text":"245"},{"range":"261","text":"248"},{"range":"262","text":"250"},{"range":"263","text":"252"},{"range":"264","text":"250"},{"range":"265","text":"252"},{"range":"266","text":"250"},{"range":"267","text":"252"},{"range":"268","text":"250"},{"range":"269","text":"252"},{"range":"270","text":"245"},{"range":"271","text":"245"},"Update the dependencies array to be: [history, props.location.pathname]",{"range":"272","text":"273"},{"range":"274","text":"245"},{"range":"275","text":"245"},{"range":"276","text":"273"},{"range":"277","text":"273"},[744,746],"[history]",[879,881],[2815,2820],"[email, history, name, password, url]",[4246,4247],"",[4246,4246],"\\",[4271,4272],[4271,4271],[4280,4281],[4280,4280],[4284,4285],[4284,4284],[742,744],[877,879],[2853,2858],[4284,4285],[4284,4284],[4309,4310],[4309,4309],[4318,4319],[4318,4318],[4322,4323],[4322,4322],[1009,1011],[997,999],[2146,2148],"[history, props.location.pathname]",[889,891],[917,919],[2822,2824],[2810,2812]]