[{"C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\index.js":"1","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\reportWebVitals.js":"2","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\App.js":"3","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Navbar\\Navbar.js":"4","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\HomeScreen\\HomeScreen.js":"5","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\SignIn\\SignIn.js":"6","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\SignUp\\SignUp.js":"7","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\OrganizationSignIn\\OrganizationSignIn.js":"8","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\OrganizationSignUp\\OrganizationSignUp.js":"9","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\AllOrganizationPolls\\AllOrganizationPolls.js":"10","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\PollData.js":"11","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\AllPersonalPolls\\AllPersonalPolls.js":"12","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\OrganizationProfile\\OrganizationProfile.js":"13","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\CreatePersonalPoll\\CreatePersonalPoll.js":"14","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\CreateOrganizationPoll\\CreateOrgnizationPoll.js":"15","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\OrganizationPoll\\OrganizationPoll.js":"16","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\PersonalPoll\\PersonalPoll.js":"17"},{"size":500,"mtime":499162500000,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"19"},{"size":2177,"mtime":1612937217187,"results":"21","hashOfConfig":"19"},{"size":13930,"mtime":1612941393993,"results":"22","hashOfConfig":"19"},{"size":152,"mtime":1612418300547,"results":"23","hashOfConfig":"19"},{"size":2696,"mtime":1612941175159,"results":"24","hashOfConfig":"19"},{"size":4276,"mtime":1612941975231,"results":"25","hashOfConfig":"19"},{"size":2724,"mtime":1612941815397,"results":"26","hashOfConfig":"19"},{"size":4319,"mtime":1612941891600,"results":"27","hashOfConfig":"19"},{"size":2317,"mtime":1612774064204,"results":"28","hashOfConfig":"19"},{"size":9649,"mtime":1612504451840,"results":"29","hashOfConfig":"19"},{"size":2288,"mtime":1612774366285,"results":"30","hashOfConfig":"19"},{"size":4408,"mtime":1612938025227,"results":"31","hashOfConfig":"19"},{"size":4022,"mtime":1612765532200,"results":"32","hashOfConfig":"19"},{"size":4061,"mtime":1612767392118,"results":"33","hashOfConfig":"19"},{"size":7196,"mtime":1612879071225,"results":"34","hashOfConfig":"19"},{"size":7170,"mtime":1612880544536,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"10hoyj8",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"38"},"C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\index.js",[],["77","78"],"C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\reportWebVitals.js",[],"C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\App.js",["79"],"C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Navbar\\Navbar.js",["80","81","82"],"C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\HomeScreen\\HomeScreen.js",[],"C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\SignIn\\SignIn.js",["83"],"C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\SignUp\\SignUp.js",["84","85","86","87","88","89"],"C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\OrganizationSignIn\\OrganizationSignIn.js",["90","91"],"C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\OrganizationSignUp\\OrganizationSignUp.js",["92","93","94","95","96","97","98"],"C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\AllOrganizationPolls\\AllOrganizationPolls.js",["99","100","101"],"import {useState, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport \"./AllOrganizationPolls.css\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst AllOrganizationPolls = ()=>{\r\n    const [PollData, setPollData] = useState([]);\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        try{\r\n            const decodedToken = jwt.verify(localStorage.getItem(\"user\"),process.env.REACT_APP_JWT_SECRET)\r\n            fetch(\"http://localhost:5000/poll/organization/getallpolls\",\r\n            {\r\n                method:\"get\",\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\",\r\n                },\r\n            })\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                console.log(result)\r\n                setPollData(result.polls)\r\n            })\r\n        }catch{\r\n            history.push(\"/signin\")\r\n        }\r\n    },[]);\r\n\r\n    return(\r\n        <div className=\"all_content_all_org_polls\">\r\n            <h1>ALL ORGANIZATION POLLS</h1>\r\n            <Grid container>\r\n                {PollData.map((data)=>{\r\n                    return(\r\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <div className=\"poll_card\">\r\n                                <div className=\"poll_card_content\">\r\n                                <div className=\"color_section\"></div>\r\n                                <img className=\"org_image\" src={data.createdBy.pic} />\r\n                                <h2 className=\"org_name_poll\">{data.createdBy.name}</h2>\r\n                                <p className=\"org_poll_question\">{data.question}</p>\r\n                                <HowToVoteIcon\r\n                                className=\"how_to_vote_icon\"></HowToVoteIcon>\r\n                                <span className=\"vote_count\">{data.votes.length? data.votes.length : 0} votes</span>\r\n                                <div className=\"color_section_bottom\"></div>\r\n                                </div>\r\n                            </div>\r\n                        </Grid> \r\n                    )\r\n                })}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllOrganizationPolls;","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\PollData.js",[],"C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\AllPersonalPolls\\AllPersonalPolls.js",["102","103","104"],"import {useState, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport \"./AllPersonalPolls.css\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst AllPersonalPolls = ()=>{\r\n    const [PollData, setPollData] = useState([]);\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        try{\r\n            const decodedToken = jwt.verify(localStorage.getItem(\"user\"),process.env.REACT_APP_JWT_SECRET)\r\n            fetch(\"http://localhost:5000/poll/personal/getallpolls\",\r\n            {\r\n                method:\"get\",\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\",\r\n                },\r\n            })\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                console.log(result)\r\n                setPollData(result.polls)\r\n            })\r\n        }catch{\r\n            history.push(\"/signin\")\r\n        }\r\n    },[]);\r\n\r\n    return(\r\n        <div className=\"all_content_all_personal_polls\">\r\n            <h1>ALL PERSONAL POLLS</h1>\r\n            <Grid container>\r\n                {PollData.map((data)=>{\r\n                    return(\r\n                        <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                            <div className=\"poll_card\">\r\n                                <div className=\"poll_card_content\">\r\n                                <div className=\"color_section\"></div>\r\n                                <img className=\"person_image\" src={data.createdBy.pic} />\r\n                                <h2 className=\"person_name_poll\">{data.createdBy.name}</h2>\r\n                                <p className=\"person_poll_question\">{data.question}</p>\r\n                                <HowToVoteIcon\r\n                                className=\"how_to_vote_icon\"></HowToVoteIcon>\r\n                                <span className=\"vote_count\">{data.votes.length} votes</span>\r\n                                <div className=\"color_section_bottom\"></div>\r\n                                </div>\r\n                            </div>\r\n                        </Grid> \r\n                    )\r\n                })}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllPersonalPolls;","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\OrganizationProfile\\OrganizationProfile.js",["105","106","107","108"],"C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\CreatePersonalPoll\\CreatePersonalPoll.js",["109"],"import {useState, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport './CreatePersonalPoll.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst CreatePersonalPoll = ()=>{\r\n    const [question, setQuestion] = useState(\"\");\r\n    const [options, setOptions] = useState([]);\r\n    const [newOption, setNewOption] = useState(\"\");\r\n    const history = useHistory();\r\n    const [id, setId] = useState(\"\");\r\n\r\n    useEffect(()=>{\r\n        try{\r\n            const decodedToken = jwt.verify(localStorage.getItem(\"user\"),process.env.REACT_APP_JWT_SECRET)\r\n            setId(decodedToken._id);\r\n        }catch{\r\n            history.push(\"/signin\")\r\n        }\r\n    },[]);\r\n\r\n    const PostData = ()=>{\r\n        if(!question){\r\n            console.log(\"Please enter question\");\r\n        }else if(options.length === 0){\r\n            console.log(\"Please enter an option\");\r\n        }else{\r\n            fetch(\"http://localhost:5000/poll/createpersonalpoll\",\r\n            {\r\n                method: \"post\",\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\",\r\n                },\r\n                body: JSON.stringify({\r\n                    question: question,\r\n                    options: options,\r\n                    createdBy: id,\r\n                }),\r\n            })\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                console.log(result)\r\n            })\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"create_poll_card\">\r\n            <h1 className=\"create_poll_heading\">CREATE A PERSONAL POLL</h1>\r\n            <Grid container className=\"poll_container\">\r\n                <Grid item xs={12} sm={6} md={4} lg={4}>\r\n                    <h3 className=\"question_heading\">QUESTION : </h3>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={8} lg={8}>\r\n                    <TextField\r\n                        id=\"outlined-primary\"\r\n                        placeholder=\"Enter a question\"\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        fullWidth={true}\r\n                        onChange={(e)=>{setQuestion(e.target.value)}}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={12} lg={12}>\r\n                    <h3 className=\"question_heading\">OPTIONS</h3>\r\n                </Grid>\r\n                {options.map((data,index)=>{\r\n                    index++;\r\n                    return(\r\n                        <Grid style={{marginTop:\"15px\",fontSize:\"1.5rem\"}} item xs={12} sm={12} md={12} lg={12}>\r\n                            {index + \". \" +data.optionContent}\r\n                        </Grid>\r\n                    )\r\n                })}\r\n                <Grid style={{marginTop:\"20px\"}} item xs={12} sm={6} md={8} lg={8}>\r\n                    <TextField\r\n                        id=\"outlined-primary\"\r\n                        placeholder=\"Enter an option\"\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        fullWidth={true}\r\n                        onChange={(e)=>{setNewOption(e.target.value)}}\r\n                        value={newOption}\r\n                    />\r\n                </Grid>\r\n                <Grid style={{marginTop:\"20px\"}} item xs={12} sm={6} md={4} lg={4}>\r\n                    <div className=\"add_option_button\"\r\n                    onClick={()=>{\r\n                        setOptions([...options, {optionContent: newOption, optionIndex: options.length + 1}]);\r\n                        setNewOption(\"\");\r\n                    }}>\r\n                        +\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n            <div className=\"submit_poll_button\"\r\n            onClick = {()=>{PostData()}}>\r\n                    SUBMIT POLL\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreatePersonalPoll;","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\CreateOrganizationPoll\\CreateOrgnizationPoll.js",["110"],"import {useState, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport './CreateOrganizationPoll.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst CreateOrganizationPoll = ()=>{\r\n    const [question, setQuestion] = useState(\"\");\r\n    const [options, setOptions] = useState([]);\r\n    const [newOption, setNewOption] = useState(\"\");\r\n    const history = useHistory();\r\n    const [id, setId] = useState(\"\");\r\n\r\n    useEffect(()=>{\r\n        try{\r\n            const decodedToken = jwt.verify(localStorage.getItem(\"organization\"),process.env.REACT_APP_JWT_SECRET)\r\n            setId(decodedToken._id);\r\n        }catch{\r\n            history.push(\"/organizationsignin\")\r\n        }\r\n    },[]);\r\n\r\n    const PostData = ()=>{\r\n        if(!question){\r\n            console.log(\"Please enter question\");\r\n        }else if(options.length === 0){\r\n            console.log(\"Please enter an option\");\r\n        }else{\r\n            fetch(\"http://localhost:5000/poll/createorganizationpoll\",\r\n            {\r\n                method: \"post\",\r\n                headers:{\r\n                    \"Content-Type\":\"application/json\",\r\n                },\r\n                body: JSON.stringify({\r\n                    question: question,\r\n                    options: options,\r\n                    createdBy: id,\r\n                }),\r\n            })\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                console.log(result)\r\n            })\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"create_poll_card\">\r\n            <h1 className=\"create_poll_heading\">CREATE AN ORGANIZATION POLL</h1>\r\n            <Grid container className=\"poll_container\">\r\n                <Grid item xs={12} sm={6} md={4} lg={4}>\r\n                    <h3 className=\"question_heading\">QUESTION : </h3>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6} md={8} lg={8}>\r\n                    <TextField\r\n                        id=\"outlined-primary\"\r\n                        placeholder=\"Enter a question\"\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        fullWidth={true}\r\n                        onChange={(e)=>{setQuestion(e.target.value)}}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={12} lg={12}>\r\n                    <h3 className=\"question_heading\">OPTIONS</h3>\r\n                </Grid>\r\n                {options.map((data,index)=>{\r\n                    index++;\r\n                    return(\r\n                        <Grid style={{marginTop:\"15px\",fontSize:\"1.5rem\"}} item xs={12} sm={12} md={12} lg={12}>\r\n                            {index + \". \" +data.optionContent}\r\n                        </Grid>\r\n                    )\r\n                })}\r\n                <Grid style={{marginTop:\"20px\"}} item xs={12} sm={6} md={8} lg={8}>\r\n                    <TextField\r\n                        id=\"outlined-primary\"\r\n                        placeholder=\"Enter an option\"\r\n                        variant=\"outlined\"\r\n                        color=\"primary\"\r\n                        fullWidth={true}\r\n                        onChange={(e)=>{setNewOption(e.target.value)}}\r\n                        value={newOption}\r\n                    />\r\n                </Grid>\r\n                <Grid style={{marginTop:\"20px\"}} item xs={12} sm={6} md={4} lg={4}>\r\n                    <div className=\"add_option_button\"\r\n                    onClick={()=>{\r\n                        setOptions([...options, {optionContent: newOption, optionIndex: options.length + 1}]);\r\n                        setNewOption(\"\");\r\n                    }}>\r\n                        +\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n            <div className=\"submit_poll_button\"\r\n            onClick={()=>{PostData()}}>\r\n                    SUBMIT POLL\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateOrganizationPoll;","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\OrganizationPoll\\OrganizationPoll.js",["111","112"],"import {useState, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport './OrganizationPoll.css';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst OrganizationPoll = (props)=>{\r\n    const [userId, setUserId] = useState(\"\");\r\n    const [pollData, setPollData] = useState({\r\n        question: \"Loading...\",\r\n        options: [\r\n            {\r\n                optionContent:\"Loading...\",\r\n                optionIndex:\"1\"\r\n            },\r\n            {\r\n                optionContent:\"Loading...\",\r\n                optionIndex:\"2\"\r\n            },\r\n            {\r\n                optionContent:\"Loading...\",\r\n                optionIndex:\"2\"\r\n            }\r\n        ],\r\n        votes:[1,2,2,2,2,3,3,3,3]\r\n    });\r\n    const [vote, setVote] = useState(undefined);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [optionCount, setOptionCount] = useState([1,4,4]);\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        try{\r\n            const decodedToken = jwt.verify(localStorage.getItem(\"user\"),process.env.REACT_APP_JWT_SECRET);\r\n            setUserId(decodedToken._id);\r\n            fetch(\r\n                `http://localhost:5000/poll/organization/${props.location.pathname.substring(18)}`,\r\n                {\r\n                    method: \"get\",\r\n                    headers:{\r\n                        \"Content-type\": \"application/json\",\r\n                    },\r\n                }\r\n            )\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                console.log(result)\r\n                if(result.message===\"Success\"){\r\n                    setPollData(result.poll);\r\n                    var op = new Array(result.poll.options.length).fill(0);\r\n                    try{\r\n                    if(result.poll.votes!==[]){\r\n                        result.poll.votes.forEach((data)=>{\r\n                            op[data.option-1]++;\r\n                        });\r\n                    }\r\n                    }catch{\r\n\r\n                    }\r\n                    setOptionCount(op);\r\n\r\n                }\r\n            })\r\n        }catch{\r\n            history.push(\"/signin\")\r\n        }\r\n    },[]);\r\n\r\n    const voteButtonHandler = ()=>{\r\n        if(pollData.votes.find((data)=>{return data.votedBy===userId})){\r\n            console.log(\"Already voted to this poll\");\r\n        }else{\r\n            console.log(\"Good to go\");\r\n            setDialogOpen(true);\r\n        }\r\n    }\r\n\r\n    const PostData = ()=>{\r\n        if(vote === undefined){\r\n            console.log(\"Please select an option\")\r\n        }else{\r\n            console.log(vote);\r\n            const index = pollData.options.findIndex((data)=>{return data.optionContent===vote})+1;\r\n            console.log(index)\r\n            fetch(\r\n                `http://localhost:5000/poll/organization/vote/${props.location.pathname.substring(18)}`,\r\n                {\r\n                    method: \"post\",\r\n                    headers:{\r\n                        \"Content-type\": \"application/json\",\r\n                    },\r\n                    body:JSON.stringify({\r\n                        userId: userId,\r\n                        option: index\r\n                    }),\r\n                }\r\n            )\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                console.log(result);\r\n            })\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"poll_all_content\">\r\n                <h1 className=\"question\">QUESTION</h1>\r\n                <h2>{pollData.question}</h2>\r\n                <h1>OPTIONS</h1>\r\n                {pollData.options.map((data,index)=>{\r\n                    return(\r\n                        <p>{index+1} . {data.optionContent}</p>\r\n                    )\r\n                })}\r\n                <HowToVoteIcon></HowToVoteIcon>\r\n                <span className=\"vote_count\">{pollData.votes.length} votes till now</span>\r\n                <p className=\"vote_count\">Conducted By : Cool Organization</p>\r\n                <h1>RESULTS</h1>\r\n                \r\n                    {pollData.options.map((data,index)=>{\r\n                        return(\r\n                            <Grid container>\r\n                                <Grid item xs={12} sm={12} md={9} lg={9}>\r\n                                    <div className=\"bar\" style={{width:pollData.votes.length?optionCount[index]/pollData.votes.length*100+\"%\":\"0.5%\"}}>\r\n                                    \r\n                                    </div>\r\n                                </Grid> \r\n                                <Grid item xs={12} sm={12} md={3} lg={3}>\r\n                                {\r\n                                    pollData.votes.length\r\n                                    ?\r\n                                    <p>{optionCount[index]} votes ({(optionCount[index]/pollData.votes.length*100).toFixed(2)+\"%\"}) {data.optionContent}</p>\r\n                                    :\r\n                                    <p>0 votes (0%) {data.optionContent}</p>\r\n                                }\r\n                                \r\n                                </Grid>  \r\n                            </Grid>\r\n                        );\r\n                    })} \r\n                <div className=\"vote\"\r\n                onClick={()=>{voteButtonHandler()}}>\r\n                    <SendIcon></SendIcon>\r\n                    <span className=\"vote_count\">VOTE</span>\r\n                </div>\r\n                \r\n                <Dialog\r\n                open={dialogOpen}\r\n                onBackdropClick={()=>{setDialogOpen(false)}}>\r\n                    <div className=\"dialog\">\r\n                        <FormControl style={{width:\"100%\"}} component=\"fieldset\">\r\n                        <h2 className=\"options_dialog\">OPTIONS</h2>\r\n                        <RadioGroup aria-label=\"Options\" name=\"options\" value={vote} onChange={(e)=>{setVote(e.target.value)}}>\r\n                            {pollData.options.map((data)=>{\r\n                                return(\r\n                                    <FormControlLabel value={data.optionContent} control={<Radio color=\"primary\" />} label={data.optionContent} />\r\n                                );\r\n                            })}\r\n                            <div className=\"vote\"\r\n                            onClick={()=>{PostData()}}>\r\n                                <SendIcon></SendIcon>\r\n                                <span className=\"vote_count\">VOTE</span>\r\n                            </div>\r\n                        </RadioGroup>\r\n                        </FormControl>\r\n                    </div>\r\n                </Dialog>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrganizationPoll;","C:\\Users\\vijay joshi\\Desktop\\Vijay\\MERN STACK PROJECTS\\POLL-TOWARDS-A-GOAL\\Frontend\\p-tag\\src\\components\\Screens\\PersonalPoll\\PersonalPoll.js",["113","114"],"import {useState, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport './PersonalPoll.css';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nconst jwt = require('jsonwebtoken');\r\n\r\nconst PersonalPoll = (props)=>{\r\n    const [userId, setUserId] = useState(\"\");\r\n    const [pollData, setPollData] = useState({\r\n        question: \"Loading...\",\r\n        options: [\r\n            {\r\n                optionContent:\"Loading...\",\r\n                optionIndex:\"1\"\r\n            },\r\n            {\r\n                optionContent:\"Loading...\",\r\n                optionIndex:\"2\"\r\n            },\r\n            {\r\n                optionContent:\"Loading...\",\r\n                optionIndex:\"2\"\r\n            }\r\n        ],\r\n        votes:[1,2,2,2,2,3,3,3,3]\r\n    });\r\n    const [vote, setVote] = useState(undefined);\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [optionCount, setOptionCount] = useState([1,4,4]);\r\n    const history = useHistory();\r\n\r\n    useEffect(()=>{\r\n        try{\r\n            const decodedToken = jwt.verify(localStorage.getItem(\"user\"),process.env.REACT_APP_JWT_SECRET);\r\n            setUserId(decodedToken._id);\r\n            fetch(\r\n                `http://localhost:5000/poll/personal/${props.location.pathname.substring(14)}`,\r\n                {\r\n                    method: \"get\",\r\n                    headers:{\r\n                        \"Content-type\": \"application/json\",\r\n                    },\r\n                }\r\n            )\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                console.log(result)\r\n                if(result.message===\"Success\"){\r\n                    setPollData(result.poll);\r\n                    var op = new Array(result.poll.options.length).fill(0);\r\n                    try{\r\n                    if(result.poll.votes!==[]){\r\n                        result.poll.votes.forEach((data)=>{\r\n                            op[data.option-1]++;\r\n                        });\r\n                    }\r\n                    }catch{\r\n\r\n                    }\r\n                    setOptionCount(op);\r\n\r\n                }\r\n            })\r\n        }catch{\r\n            history.push(\"/signin\")\r\n        }\r\n    },[]);\r\n\r\n    const voteButtonHandler = ()=>{\r\n        if(pollData.votes.find((data)=>{return data.votedBy===userId})){\r\n            console.log(\"Already voted to this poll\");\r\n        }else{\r\n            console.log(\"Good to go\");\r\n            setDialogOpen(true);\r\n        }\r\n    }\r\n\r\n    const PostData = ()=>{\r\n        if(vote === undefined){\r\n            console.log(\"Please select an option\")\r\n        }else{\r\n            console.log(vote);\r\n            const index = pollData.options.findIndex((data)=>{return data.optionContent===vote})+1;\r\n            console.log(index)\r\n            fetch(\r\n                `http://localhost:5000/poll/personal/vote/${props.location.pathname.substring(14)}`,\r\n                {\r\n                    method: \"post\",\r\n                    headers:{\r\n                        \"Content-type\": \"application/json\",\r\n                    },\r\n                    body:JSON.stringify({\r\n                        userId: userId,\r\n                        option: index\r\n                    }),\r\n                }\r\n            )\r\n            .then(res=>res.json())\r\n            .then(result=>{\r\n                console.log(result);\r\n            })\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"poll_all_content\">\r\n                <h1 className=\"question\">QUESTION</h1>\r\n                <h2>{pollData.question}</h2>\r\n                <h1>OPTIONS</h1>\r\n                {pollData.options.map((data,index)=>{\r\n                    return(\r\n                        <p>{index+1} . {data.optionContent}</p>\r\n                    )\r\n                })}\r\n                <HowToVoteIcon></HowToVoteIcon>\r\n                <span className=\"vote_count\">{pollData.votes.length} votes till now</span>\r\n                <p className=\"vote_count\">Conducted By : Cool Person</p>\r\n                <h1>RESULTS</h1>\r\n                \r\n                    {pollData.options.map((data,index)=>{\r\n                        return(\r\n                            <Grid container>\r\n                                <Grid item xs={12} sm={12} md={9} lg={9}>\r\n                                    <div className=\"bar\" style={{width:pollData.votes.length?optionCount[index]/pollData.votes.length*100+\"%\":\"0.5%\"}}>\r\n                                    \r\n                                    </div>\r\n                                </Grid> \r\n                                <Grid item xs={12} sm={12} md={3} lg={3}>\r\n                                {\r\n                                    pollData.votes.length\r\n                                    ?\r\n                                    <p>{optionCount[index]} votes ({(optionCount[index]/pollData.votes.length*100).toFixed(2)+\"%\"}) {data.optionContent}</p>\r\n                                    :\r\n                                    <p>0 votes (0%) {data.optionContent}</p>\r\n                                }\r\n                                \r\n                                </Grid>  \r\n                            </Grid>\r\n                        );\r\n                    })} \r\n                <div className=\"vote\"\r\n                onClick={()=>{voteButtonHandler()}}>\r\n                    <SendIcon></SendIcon>\r\n                    <span className=\"vote_count\">VOTE</span>\r\n                </div>\r\n                \r\n                <Dialog\r\n                open={dialogOpen}\r\n                onBackdropClick={()=>{setDialogOpen(false)}}>\r\n                    <div className=\"dialog\">\r\n                        <FormControl style={{width:\"100%\"}} component=\"fieldset\">\r\n                        <h2 className=\"options_dialog\">OPTIONS</h2>\r\n                        <RadioGroup aria-label=\"Options\" name=\"options\" value={vote} onChange={(e)=>{setVote(e.target.value)}}>\r\n                            {pollData.options.map((data)=>{\r\n                                return(\r\n                                    <FormControlLabel value={data.optionContent} control={<Radio color=\"primary\" />} label={data.optionContent} />\r\n                                );\r\n                            })}\r\n                            <div className=\"vote\"\r\n                            onClick={()=>{PostData()}}>\r\n                                <SendIcon></SendIcon>\r\n                                <span className=\"vote_count\">VOTE</span>\r\n                            </div>\r\n                        </RadioGroup>\r\n                        </FormControl>\r\n                    </div>\r\n                </Dialog>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PersonalPoll;",{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":2,"column":24,"nodeType":"121","messageId":"122","endLine":2,"endColumn":28},{"ruleId":"119","severity":1,"message":"123","line":20,"column":13,"nodeType":"121","messageId":"122","endLine":20,"endColumn":25},{"ruleId":"119","severity":1,"message":"123","line":25,"column":15,"nodeType":"121","messageId":"122","endLine":25,"endColumn":27},{"ruleId":"124","severity":1,"message":"125","line":31,"column":6,"nodeType":"126","endLine":31,"endColumn":34},{"ruleId":"124","severity":1,"message":"127","line":19,"column":7,"nodeType":"128","endLine":19,"endColumn":9,"suggestions":"129"},{"ruleId":"124","severity":1,"message":"127","line":22,"column":7,"nodeType":"128","endLine":22,"endColumn":9,"suggestions":"130"},{"ruleId":"124","severity":1,"message":"131","line":46,"column":7,"nodeType":"128","endLine":46,"endColumn":12,"suggestions":"132"},{"ruleId":"133","severity":1,"message":"134","line":72,"column":42,"nodeType":"135","messageId":"136","endLine":72,"endColumn":43,"suggestions":"137"},{"ruleId":"133","severity":1,"message":"134","line":72,"column":67,"nodeType":"135","messageId":"136","endLine":72,"endColumn":68,"suggestions":"138"},{"ruleId":"133","severity":1,"message":"134","line":72,"column":76,"nodeType":"135","messageId":"136","endLine":72,"endColumn":77,"suggestions":"139"},{"ruleId":"133","severity":1,"message":"134","line":72,"column":80,"nodeType":"135","messageId":"136","endLine":72,"endColumn":81,"suggestions":"140"},{"ruleId":"119","severity":1,"message":"123","line":14,"column":19,"nodeType":"121","messageId":"122","endLine":14,"endColumn":31},{"ruleId":"124","severity":1,"message":"127","line":19,"column":7,"nodeType":"128","endLine":19,"endColumn":9,"suggestions":"141"},{"ruleId":"119","severity":1,"message":"123","line":17,"column":19,"nodeType":"121","messageId":"122","endLine":17,"endColumn":31},{"ruleId":"124","severity":1,"message":"127","line":22,"column":7,"nodeType":"128","endLine":22,"endColumn":9,"suggestions":"142"},{"ruleId":"124","severity":1,"message":"131","line":46,"column":7,"nodeType":"128","endLine":46,"endColumn":12,"suggestions":"143"},{"ruleId":"133","severity":1,"message":"134","line":72,"column":42,"nodeType":"135","messageId":"136","endLine":72,"endColumn":43,"suggestions":"144"},{"ruleId":"133","severity":1,"message":"134","line":72,"column":67,"nodeType":"135","messageId":"136","endLine":72,"endColumn":68,"suggestions":"145"},{"ruleId":"133","severity":1,"message":"134","line":72,"column":76,"nodeType":"135","messageId":"136","endLine":72,"endColumn":77,"suggestions":"146"},{"ruleId":"133","severity":1,"message":"134","line":72,"column":80,"nodeType":"135","messageId":"136","endLine":72,"endColumn":81,"suggestions":"147"},{"ruleId":"119","severity":1,"message":"123","line":14,"column":19,"nodeType":"121","messageId":"122","endLine":14,"endColumn":31},{"ruleId":"124","severity":1,"message":"127","line":30,"column":7,"nodeType":"128","endLine":30,"endColumn":9,"suggestions":"148"},{"ruleId":"149","severity":1,"message":"150","line":42,"column":33,"nodeType":"151","endLine":42,"endColumn":87},{"ruleId":"119","severity":1,"message":"123","line":14,"column":19,"nodeType":"121","messageId":"122","endLine":14,"endColumn":31},{"ruleId":"124","severity":1,"message":"127","line":30,"column":7,"nodeType":"128","endLine":30,"endColumn":9,"suggestions":"152"},{"ruleId":"149","severity":1,"message":"150","line":42,"column":33,"nodeType":"151","endLine":42,"endColumn":90},{"ruleId":"119","severity":1,"message":"123","line":20,"column":19,"nodeType":"121","messageId":"122","endLine":20,"endColumn":31},{"ruleId":"119","severity":1,"message":"123","line":39,"column":23,"nodeType":"121","messageId":"122","endLine":39,"endColumn":35},{"ruleId":"124","severity":1,"message":"153","line":61,"column":7,"nodeType":"128","endLine":61,"endColumn":9,"suggestions":"154"},{"ruleId":"149","severity":1,"message":"150","line":70,"column":21,"nodeType":"151","endLine":70,"endColumn":76},{"ruleId":"124","severity":1,"message":"127","line":22,"column":7,"nodeType":"128","endLine":22,"endColumn":9,"suggestions":"155"},{"ruleId":"124","severity":1,"message":"127","line":22,"column":7,"nodeType":"128","endLine":22,"endColumn":9,"suggestions":"156"},{"ruleId":"119","severity":1,"message":"157","line":8,"column":8,"nodeType":"121","messageId":"122","endLine":8,"endColumn":17},{"ruleId":"124","severity":1,"message":"153","line":75,"column":7,"nodeType":"128","endLine":75,"endColumn":9,"suggestions":"158"},{"ruleId":"119","severity":1,"message":"157","line":8,"column":8,"nodeType":"121","messageId":"122","endLine":8,"endColumn":17},{"ruleId":"124","severity":1,"message":"153","line":75,"column":7,"nodeType":"128","endLine":75,"endColumn":9,"suggestions":"159"},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'decodedToken' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["162"],["163"],"React Hook useEffect has missing dependencies: 'email', 'name', and 'password'. Either include them or remove the dependency array.",["164"],"no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["165","166"],["167","168"],["169","170"],["171","172"],["173"],["174"],["175"],["176","177"],["178","179"],["180","181"],["182","183"],["184"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["185"],"React Hook useEffect has missing dependencies: 'history' and 'props.location.pathname'. Either include them or remove the dependency array.",["186"],["187"],["188"],"'FormLabel' is defined but never used.",["189"],["190"],"no-global-assign","no-unsafe-negation",{"desc":"191","fix":"192"},{"desc":"191","fix":"193"},{"desc":"194","fix":"195"},{"messageId":"196","fix":"197","desc":"198"},{"messageId":"199","fix":"200","desc":"201"},{"messageId":"196","fix":"202","desc":"198"},{"messageId":"199","fix":"203","desc":"201"},{"messageId":"196","fix":"204","desc":"198"},{"messageId":"199","fix":"205","desc":"201"},{"messageId":"196","fix":"206","desc":"198"},{"messageId":"199","fix":"207","desc":"201"},{"desc":"191","fix":"208"},{"desc":"191","fix":"209"},{"desc":"194","fix":"210"},{"messageId":"196","fix":"211","desc":"198"},{"messageId":"199","fix":"212","desc":"201"},{"messageId":"196","fix":"213","desc":"198"},{"messageId":"199","fix":"214","desc":"201"},{"messageId":"196","fix":"215","desc":"198"},{"messageId":"199","fix":"216","desc":"201"},{"messageId":"196","fix":"217","desc":"198"},{"messageId":"199","fix":"218","desc":"201"},{"desc":"191","fix":"219"},{"desc":"191","fix":"220"},{"desc":"221","fix":"222"},{"desc":"191","fix":"223"},{"desc":"191","fix":"224"},{"desc":"221","fix":"225"},{"desc":"221","fix":"226"},"Update the dependencies array to be: [history]",{"range":"227","text":"228"},{"range":"229","text":"228"},"Update the dependencies array to be: [email, name, password, url]",{"range":"230","text":"231"},"removeEscape",{"range":"232","text":"233"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"234","text":"235"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"236","text":"233"},{"range":"237","text":"235"},{"range":"238","text":"233"},{"range":"239","text":"235"},{"range":"240","text":"233"},{"range":"241","text":"235"},{"range":"242","text":"228"},{"range":"243","text":"228"},{"range":"244","text":"231"},{"range":"245","text":"233"},{"range":"246","text":"235"},{"range":"247","text":"233"},{"range":"248","text":"235"},{"range":"249","text":"233"},{"range":"250","text":"235"},{"range":"251","text":"233"},{"range":"252","text":"235"},{"range":"253","text":"228"},{"range":"254","text":"228"},"Update the dependencies array to be: [history, props.location.pathname]",{"range":"255","text":"256"},{"range":"257","text":"228"},{"range":"258","text":"228"},{"range":"259","text":"256"},{"range":"260","text":"256"},[634,636],"[history]",[769,771],[1495,1500],"[email, name, password, url]",[2220,2221],"",[2220,2220],"\\",[2245,2246],[2245,2245],[2254,2255],[2254,2254],[2258,2259],[2258,2258],[632,634],[767,769],[1505,1510],[2230,2231],[2230,2230],[2255,2256],[2255,2255],[2264,2265],[2264,2264],[2268,2269],[2268,2268],[1009,1011],[997,999],[2146,2148],"[history, props.location.pathname]",[779,781],[807,809],[2648,2650],[2636,2638]]